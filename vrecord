#!/bin/bash
config_file="$HOME/.$(basename "${0}").conf"
inputoptions=""
middleoptions=""
suffix=""
timer=""
runtype="record"
bmdcapturelogsuffix="_bmdcapture.log"
ffmpeglogsuffix=".log"
framemd5="Y"
unset extraoutputs

video_input_options=("Composite" "SDI" "Component" "S-Video")
audio_input_options=("Analog" "SDI Embedded Audio" "Digital Audio (AES/EBU)")
video_bitdepth_options=("10 bit" "8 bit")
video_codec_options=("Uncompressed Video" "FFV1 version 3" "JPEG2000" "ProRes")
channel_mapping_options=("2 Stereo Tracks" "1 Stereo Track" "Channel 1 -> 1st Track Mono, Channel 2 -> 2nd Track Mono" "Channel 2 -> 1st Track Mono, Channel 1 -> 2nd Track Mono" )

if [ -f "${config_file}" ] ; then
    . "${config_file}"
fi

report(){
        local RED="$(tput setaf 1)"   # Red      - For Warnings
        local GREEN="$(tput setaf 2)" # Green    - For Declarations
        local BLUE="$(tput setaf 4)"  # Blue     - For Questions
        local NC="$(tput sgr0)"       # No Color
        local color=""
        local startmessage=""
        local endmessage=""
        local echoopt=""
        local log_message=""
        OPTIND=1
        while getopts ":qdwstn" opt; do
            case "${opt}" in
                q) color="${BLUE}" ;;                         # question mode, use color blue
                d) color="${GREEN}" ;;                        # declaration mode, use color green
                w) color="${RED}" ; log_message="Y";;                 # warning mode, use color red
                s) startmessage+=([$(basename "${0}")] ) ;;     # prepend scriptname to the message
                t) startmessage+=($(get_iso8601) '- ' ) ;;     # prepend timestamp to the message
                n) echoopt="-n" ;;                          # to avoid line breaks after echo
            esac
        done
        shift $(( ${OPTIND} - 1 ))
        message="${1}"
        echo $echoopt "${color}${startmessage[@]}${message}${NC}"
}

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "$(basename "${0}") will record a file via the blackmagic sdk and bmdtools. It is an interactive script and will either create 8 or 10 bit video."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -h ]"
    echo "  -h ( display this help )"
    echo "  -p ( enable passthrough mode where video is played back but not written to file )"
    echo
    echo "Installation help:"
    echo "To install (on a mac) run these commands:"
    echo "brew update"
    echo "brew tap amiaopensource/amiaos"
    echo "brew install vrecord"
    exit
}

lookup_video_input(){
    case "${1}" in
        "Composite")    video_input=1 ;;
        "SDI")          video_input=4 ;;
        "Component")    video_input=2 ;;
        "S-Video")      video_input=6 ;;
        Q) exit 0 ;;
        q) exit 0 ;;
        *)  report -w "Error not a valid option, select a valid number or [q] to quit." ; return 1 ;;
    esac
}

lookup_audio_input(){
    case "${1}" in
        "Analog")                   audio_input=1 ;;
        "SDI Embedded Audio")       audio_input=2 ;;
        "Digital Audio (AES/EBU)")  audio_input=3 ;;
        Q) exit 0 ;;
        q) exit 0 ;;
        *)  report -w "Error not a valid option, select a valid number or [q] to quit." ; return 1 ;;
    esac
}

lookup_video_bitdepth(){
    case "${1}" in
        "10 bit")   video_bitdepth=10 ;;
        "8 bit")    video_bitdepth=8 ;;
        Q) exit ;;
        q) exit ;;
        *)  report -w "Error not a valid option, select a valid number or [q] to quit." ; return 1 ;;
    esac
}

lookup_video_codec(){
    case "${1}" in
        "Uncompressed Video")
            if [ "${video_bitdepth}" = "10" ] ; then
                codecname="Uncompressed 10-bit 4:2:2"
                middleoptions+=(-c:v v210)
            elif [ "${video_bitdepth}" = "8" ] ; then
                codecname="Uncompressed 8-bit 4:2:2"
                middleoptions+=(-c:v rawvideo -pix_fmt uyvy422 -tag:v 2vuy)
            fi ;;
        "FFV1 version 3")
            codecname="FFV1 version 3"
            middleoptions+=(-c:v ffv1 -level 3 -g 1)
            suffix="_ffv1"
            ;;
        "JPEG2000")
            codecname="JPEG2000"
            middleoptions+=(-c:v libopenjpeg)
            suffix="_j2k"
            ;;
        "ProRes")
            codecname="Apple ProRes 422"
            middleoptions+=(-c:v prores)
            suffix="_prores"
            ;;
        Q) exit ;;
        q) exit ;;
        *)  report -w "Error not a valid option, select a valid number or [q] to quit." ; return 1 ;;
    esac
}

lookup_audio_mapping(){
    case "${1}" in
        "2 Stereo Tracks")
audiomap="[0:a:0]channelsplit=channel_layout=4.0[a1][a2][a3][a4];[a1][a2]amerge,aformat=channel_layouts=stereo[stereo1];[a3][a4]amerge,aformat=channel_layouts=stereo[stereo2]"
        map1k="-map"
        map1v="[stereo1]"
        map2k="-map"
        map2v="[stereo2]"
        break ;;
        "1 Stereo Track")
audiomap="[0:a:0]channelsplit=channel_layout=2[a1][a2];[a1][a2]amerge,aformat=channel_layouts=stereo[stereo1]"
        map1k="-map"
        map1v="[stereo1]"
        map2k=""
        map2v=""
        break ;;
        "Channel 1 -> 1st Track Mono, Channel 2 -> 2nd Track Mono")
audiomap="[0:a:0]channelsplit=channel_layout=2[a1][a2];[a1]aformat=channel_layouts=mono[mono1];[a2]aformat=channel_layouts=mono[mono2]"
        map1k="-map"
        map1v="[mono1]"
        map2k="-map"
        map2v="[mono2]"
        break ;;
        "Channel 2 -> 1st Track Mono, Channel 1 -> 2nd Track Mono")
audiomap="[0:a:0]channelsplit=channel_layout=2[a1][a2];[a1]aformat=channel_layouts=mono[mono1];[a2]aformat=channel_layouts=mono[mono2]"
        map1k="-map"
        map1v="[mono2]"
        map2k="-map"
        map2v="[mono1]"
        break ;;
        Q) exit ;;
        q) exit ;;
        *)  report -w "Error not a valid option, select a valid number or [q] to quit." ; return 1 ;;
    esac
}

# command-line options to set mediaid and original variables
OPTIND=1
while getopts "herp" opt ; do
    case "${opt}" in
        h) usage ;;
        e) runtype="edit";;
        r) runtype="record";;
        p) runtype="passthrough" ;;
        *) report -w "bad option -$OPTARG" ; usage ;;
        :) report -w "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done

recordingfilter="[0:v:0]setfield=bff,setsar=40/27,setdar=4/3[vid1]"
playbackfilter="split=5[a][b][c][d][e];\
        [b]field=top[b1];\
        [c]field=bottom[c1];\
        [b1]histogram=step=20:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16[b2];\
        [c1]histogram=step=20:mode=waveform:waveform_mode=column:waveform_mirror=1,\
        crop=iw:256:0:0,\
        drawbox=y=(256-16):w=iw:h=16:color=aqua@0.3:t=16,\
        drawbox=w=iw:h=(256-235):color=crimson@0.3:t=16[c2];\
        [b2][c2]framepack=tab,format=yuv422p[bc1];\
        [a]pad=iw+512:ih+512[a1];\
        [d]histogram=mode=color2,lutyuv=y=val*5,\
        transpose=dir=2,\
        scale=512:512,\
        drawgrid=w=32:h=32:t=1:c=white@0.1,\
        drawgrid=w=256:h=256:t=1:c=white@0.2,\
        drawbox=w=9:h=9:t=1:x=180-3:y=512-480-5:c=red@0.6,\
        drawbox=w=9:h=9:t=1:x=108-3:y=512-68-5:c=green@0.6,\
        drawbox=w=9:h=9:t=1:x=480-3:y=512-220-5:c=blue@0.6,\
        drawbox=w=9:h=9:t=1:x=332-3:y=512-32-5:c=cyan@0.6,\
        drawbox=w=9:h=9:t=1:x=404-3:y=512-444-5:c=magenta@0.6,\
        drawbox=w=9:h=9:t=1:x=32-3:y=512-292-5:c=yellow@0.6,\
        drawbox=w=9:h=9:t=1:x=199-3:y=512-424-5:c=red@0.8,\
        drawbox=w=9:h=9:t=1:x=145-3:y=512-115-5:c=green@0.8,\
        drawbox=w=9:h=9:t=1:x=424-3:y=512-229-5:c=blue@0.8,\
        drawbox=w=9:h=9:t=1:x=313-3:y=512-88-5:c=cyan@0.8,\
        drawbox=w=9:h=9:t=1:x=367-3:y=512-397-5:c=magenta@0.8,\
        drawbox=w=9:h=9:t=1:x=88-3:y=512-283-5:c=yellow@0.8,\
        drawbox=w=9:h=9:t=1:x=128-3:y=512-452-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=160-3:y=512-404-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=192-3:y=512-354-5:c=sienna@0.8,\
        drawbox=w=9:h=9:t=1:x=224-3:y=512-304-5:c=sienna@0.8[d1];\
        [e]signalstats=out=brng,scale=512:486[e1];\
        [a1][bc1]overlay=0:486[abc1];\
        [abc1][d1]overlay=720:486[abcd1];\
        [abcd1][e1]overlay=720:0[out]"

shift $(( ${OPTIND} - 1 ))

if [[ "${runtype}" = "edit" ]] ; then
    if [ ! -f "${config_file}" ] ; then
        echo "#$(basename "${0}") config file" > "${config_file}"
        echo "# Set each value to empty quotes (like \"\") to prompt during run, or set to a provided option."
        echo "# Set video_input_choice to one of these valid options or leave blank to request each run:  $(printf "\"%s\" " "${video_input_options[@]}")" >> "${config_file}"
        echo "video_input_choice=\"\"" >> "${config_file}"
        echo  >> "${config_file}"
        echo "#Set audio_input_choice to one of these valid options or leave blank to request each run:  $(printf "\"%s\" " "${audio_input_options[@]}")" >> "${config_file}"
        echo "audio_input_choice=\"\"" >> "${config_file}"
        echo  >> "${config_file}"
        echo "#Set video_bit_depth_choice to one of these valid options or leave blank to request each run:  $(printf "\"%s\" " "${video_bitdepth_options[@]}")" >> "${config_file}"
        echo "video_bit_depth_choice=\"\"" >> "${config_file}"
        echo  >> "${config_file}"
        echo "#Set video_codec_choice to one of these valid options or leave blank to request each run: $(printf "\"%s\" " "${video_codec_options[@]}")" >> "${config_file}"
        echo "video_codec_choice=\"\"" >> "${config_file}"
        echo  >> "${config_file}"
        echo "#Set audio_mapping_choice to one of these valid options or leave blank to request each run:  $(printf "\"%s\" " "${channel_mapping_options[@]}")" >> "${config_file}"
        echo "audio_mapping_choice=\"\"" >> "${config_file}"
        echo  >> "${config_file}"
        echo "#Set dir to the preferred recording directory or leave blank to request each run:" >> "${config_file}"
        echo "dir=" >> "${config_file}"
    fi
    mate "${config_file}"
    report -q "After saving the config file, press any key to continue"
    read
    . "${config_file}"
fi

if [ "${video_input_choice}" ] ; then
    lookup_video_input "${video_input_choice}"
else
    report -q "Which VIDEO input are you using?"
    PS3="Select a video input: "
    select video_input_choice in "${video_input_options[@]}" ; do
        lookup_video_input "${video_input_choice}"
        [ "${?}" -eq 0 ] && break
    done
fi

if [ "${audio_input_choice}" ] ;then
    lookup_audio_input "${audio_input_choice}"
else
    report -q "Which AUDIO input are you using?"
    PS3="Select an audio input: "
    select audio_input_choice in "${audio_input_options[@]}" ; do
        lookup_audio_input "${audio_input_choice}"
        [ "${?}" -eq 0 ] && break
    done
fi

if [[ "${runtype}" = "passthrough" ]] ; then
    video_bitdepth=10
    bmdcapture -m 0 -V "${video_input}" -A "${audio_input}" -c 8 -s 32 -p "${video_bitdepth}" -F nut -f pipe:1 | \
            ffplay -v info -hide_banner -stats -i - \
            -window_title "mode:${runtype} - video:'${video_input_choice}' audio:'${audio_input_choice}'" \
            -vf "${playbackfilter}"
    exit 0
fi
report -q -n "Enter Identifier: "
read id
if [ ! -d "${dir}" ] ; then
    report -q -n "Enter Directory: "
    read dir
    if [ ! -d "$dir" ] ; then
        report -w "error not a valid directory"
        exit
    fi
fi
report -q -n "Default recording time (minutes), blank for unlimited: "
read duration
if [ ! -z "${duration}" ] ; then
    dur_seconds=$(echo "${duration} * 60" | bc)
    inputoptions+=(-t "${dur_seconds}")
fi

if [ "$video_bit_depth_choice" ] ; then
    lookup_video_bitdepth "$video_bit_depth_choice"
else
    report -q "Which VIDEO bit depth?"
    PS3="Select a video bit depth: "
    select video_bit_depth_choice in "${video_bitdepth_options[@]}" ; do
        lookup_video_bitdepth "$video_bit_depth_choice"
        [ "${?}" -eq 0 ] && break
    done
fi


if [ "${video_codec_choice}" ] ; then
    lookup_video_codec "${video_codec_choice}"
else
    report -q "Which VIDEO codec?"
    PS3="Select a video codec: "
    select video_codec_choice in "${video_codec_options[@]}" ; do
        lookup_video_codec "${video_codec_choice}"
        [ "${?}" -eq 0 ] && break
    done
fi

if [ "${audio_mapping_choice}"] ; then
    lookup_audio_mapping "${audio_mapping_choice}"
else
    report -q "Select an audio mapping."
    PS3="Select an audio mapping: "
    select audio_mapping_choice in "${channel_mapping_options[@]}" ; do
        lookup_audio_mapping "${audio_mapping_choice}"
        [ "${?}" -eq 0 ] && break
    done
fi

if [[ "${framemd5}" = "Y" ]] ; then
    extraoutputs+=(-an -f framemd5 "${dir}/${id}${suffix}.framemd5")
fi

report -d "Summary: ${video_bitdepth} bit "${codecopt}" file from ${video_input} and ${audio_input} inputs recorded to ${dir}/${id}.mov"
report -q "Hit enter to start"
read
report -d "Run vstop from a separate terminal window/tab to stop."
report -d "Running this: bmdcapture -m 0 -V \"${video_input}\" -A \"${audio_input}\" -c 8 -s 32 -p \"${video_bitdepth}\" -F nut -f pipe:1 | ffmpeg -v verbose -i - ${middleoptions[@]} -c:a pcm_s24le -filter_complex \"[0:v:0]setfield=bff,setsar=40/27,setdar=4/3[vid1];[0:a:0]channelsplit=channel_layout=4.0[a1][a2][a3][a4];[a1][a2]amerge,aformat=channel_layouts=stereo[stereo1];[a3][a4]amerge,aformat=channel_layouts=stereo[stereo2]\" -map \"[vid1]\" -map \"[stereo1]\" -map \"[stereo2]\"  \"${dir}/${id}.mov\" -c copy -f nut - | ffplay -"
export FFREPORT="file=${dir}/${id}_%p_%t${ffmpeglogsuffix}"
bmdcapture -v -m 0 -V "${video_input}" -A "${audio_input}" -c 8 -s 32 -p "${video_bitdepth}" -F nut -f pipe:1 2> "${dir}/${id}${bmdcapturelogsuffix}" | \
    ffmpeg -v info -hide_banner -stats ${inputoptions[@]} -i - ${middleoptions[@]} \
        -metadata:s:v:0 encoder="${codecname}" \
        -c:a pcm_s24le \
        -filter_complex "${recordingfilter};${audiomap}" \
        -map "[vid1]" \
        $(if [ -n "$map1k" ] ; then echo ${map1k} ; fi) $(if [ -n "$map1v" ] ; then echo ${map1v} ; fi) \
        $(if [ -n "$map2k" ] ; then echo ${map2k} ; fi) $(if [ -n "$map2v" ] ; then echo ${map2v} ; fi) \
        "${dir}/${id}${suffix}.mov" \
        "${extraoutputs[@]}"\
        -c copy -f nut - | \
        ffplay \
            -v info \
            -hide_banner \
            -stats \
            - \
            -window_title "mode:${runtype} - video:'${video_input_choice}' audio:'${audio_input_choice}'" \
            -vf "${playbackfilter}"
